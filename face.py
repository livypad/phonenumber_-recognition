# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'face.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import wave

import numpy as np
from PyQt5 import QtCore, QtWidgets
from scipy import signal

HighFreq = [
    1209, 1336, 1477, 1633, 1209, 1336, 1477, 1633, 1209, 1336, 1477, 1633,
    1209, 1336, 1477, 1633
]
LowFreq = [
    697, 697, 697, 697, 770, 770, 770, 770, 852, 852, 852, 852, 941, 941, 941,
    941, 941
]
database = [
    "1", "2", "3", "A", "4", "5", "6", "B", "7", "8", "9", "C", "*", "0", "#",
    "D"
]


def fft_deal(data, framerate, left0):
    f = []
    treat_data = data[left0 - 512:left0 + 511].copy()

    fftx = np.fft.fft(treat_data, 1024)
    fftx = np.fft.fftshift(fftx)
    absfft = np.abs(fftx) / 1024
    for i in range(10):
        arg = np.argmax(absfft)
        is_new_freq = True
        temp = -framerate / 2 + arg * framerate / 1024
        for j in range(len(f)):
            if np.abs(temp - f[j]) < 50:
                is_new_freq = False
        if is_new_freq:
            f.append(temp)
        absfft[arg] = 0
    f = np.abs(np.array(f))
    f = np.sort(np.unique(f))

    for i in range(len(database)):
        if np.abs(f[0] - LowFreq[i]) < 70:
            if np.abs(f[1] - HighFreq[i]) < 70:
                return database[i]


class Ui_Dialog(object):

    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(400, 300)
        self.pushButton_1 = QtWidgets.QPushButton(Dialog)
        self.pushButton_1.setGeometry(QtCore.QRect(80, 220, 93, 28))
        self.pushButton_1.setObjectName("pushButton_1")
        self.pushButton_2 = QtWidgets.QPushButton(Dialog)
        self.pushButton_2.setGeometry(QtCore.QRect(220, 220, 93, 28))
        self.pushButton_2.setObjectName("pushButton_2")
        self.textBrowser = QtWidgets.QTextBrowser(Dialog)
        self.textBrowser.setGeometry(QtCore.QRect(60, 100, 256, 21))
        self.textBrowser.setObjectName("textBrowser")
        self.textBrowser_2 = QtWidgets.QTextBrowser(Dialog)
        self.textBrowser_2.setGeometry(QtCore.QRect(60, 121, 256, 60))
        self.textBrowser_2.setObjectName("textBrowser_2")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
        self.pushButton_1.clicked.connect(self.showDialog1)
        self.pushButton_2.clicked.connect(self.showDialog2)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.pushButton_1.setText(_translate("Dialog", "载入数据"))
        self.pushButton_2.setText(_translate("Dialog", "退出"))
        self.textBrowser.setHtml(
            _translate(
                "Dialog",
                "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                "p, li { white-space: pre-wrap; }\n"
                "</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; "
                "font-style:normal;\">\n "
                "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; "
                "-qt-block-indent:0; text-indent:0px;\">识别结果：</p></body></html> "
            ))

    def showDialog1(self):
        file_name = QtWidgets.QFileDialog.getOpenFileName(self, 'Open file', '.')
        if file_name[0]:
            self.calc(file_name)

    def showDialog2(self):
        exit(0)

    def calc(self, file_name):
        final = []

        fil = wave.open(file_name[0], "rb")
        params = fil.getparams()
        nchannels, sampwidth, framerate, nframes = params[:4]
        str_data = fil.readframes(nframes)
        # readframes：读取声音数据，传递一个参数指定需要读取的长度（以取样点为单位），readframes返回的是二进制数据（一大堆
        # bytes)，在Python中用字符串表示二进制数据：
        fil.close()
        wave_in = np.frombuffer(str_data, dtype=np.short)
        wave_data = wave_in.copy()
        b, a = signal.butter(12, [800 / framerate, 2 * 1800 / framerate], 'bandpass')
        wave_data = signal.filtfilt(b, a, wave_data)
        nor = np.max(np.abs(wave_data))  # 归一化wave，方便参数选择
        wavetr = np.ndarray(wave_data.shape[0])
        # 0.15 magic number：阈值
        for i in range(wave_data.shape[0]):
            if wave_data[i] < 0.15 * nor:
                wavetr[i] = 0
            else:
                wavetr[i] = 1

        num = int(framerate / 40)
        right_end = wavetr.shape[0] - 2 * num
        left = []
        threshold = 43
        key = [0]
        j = 0

        while j <= right_end:
            test = 0
            for i in np.arange(j, num + j):
                test += np.abs(wavetr[i])

            if test > threshold:
                key.append(1)
            else:
                key.append(0)
            if key[-1] > key[-2]:
                left.append(j + int(num / 2))
            j += num

        for i in range(len(left)):
            final.append(fft_deal(wave_data, framerate, left[i]))
        self.textBrowser_2.setText(str(final))
